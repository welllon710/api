<?php
namespace app\controller;
use app\BaseController;
use app\model\Admin;
use app\model\User;
use app\Request;
use app\validate\Code;
use think\Validate;


class Base extends BaseController
{
    protected $rule = [
       'Code'=>[
           'get_code'=>[
               'username'=>'require'
           ]
       ],
        'User'=>[
            'register'=>[
                'username'=>'require',
                'password'=>'require',
                'code'=>'require|number|max:6'
            ],
            'login'=>[
                'username'=>'require',
                'password'=>'require'
            ]
        ]
    ];
    protected $params;
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->check_time($this->request->only(['time']));
        $this->check_token($this->request->param());
         $this->params = $this->check_params($this->request->except(['time','token']));//得到传递的参数

    }
    public function return_msg($data=[],$msg='',$code=200){
        $result = [
            'code'=>$code,
            'msg'=>$msg,
            'data'=>$data
        ];
      //  return json($result)->send();
        echo json_encode($result);die;
    }
    public function check_time($arr){
      //  echo time();
        if (!isset($arr['time']) || intval($arr['time']) <= 1){
            $this->return_msg('','时间戳没有或者不存在',400);
        }
        if (time() - intval($arr['time']) >= 600){
            $this->return_msg('','请求超时',400);
        }
    }
    public function check_token($arr){
        if (!isset($arr['token']) || empty($arr['token'])){
            $this->return_msg([],'token值无效或者无',400);
        }
        $_token = $arr['token'];
//        服务器制作token
        $s_token = '';
        unset($arr['token']);
        /* 自己制作token*/
        foreach ($arr as $k=>$v){
            $s_token .= md5($v);
        }
        $s_token = md5('api'.$s_token);
     //   echo $s_token;
        if ($_token !== $s_token){
            $this->return_msg([],'token值无效',400);

        }
    }
    // 验证数据
    public function check_params($arr){
       if (is_array($arr)){
           $_controller = \request()->controller();//控制器名称
           $_action = \request()->action();//操作方法
           $rule = $this->rule[$_controller][$_action];
           $validete = new Validate($rule);
           if (!$validete->check($arr)){
               $this->return_msg([],$validete->getError(),400);
           }
           return $arr;
       }else{
           $this->return_msg([],'参数必须是数组',400);
       }
    }
    //判断
    public function check_username($name){
        $email = \validate()->is($name,'email')?1:0;
        $phone = preg_match('/^0?(13|14|15|17|18)[0-9]{9}$/',$name)? 4:2;
        $judge = $email + $phone;
        switch ($judge){
            case 2:
                $this->return_msg([],'参数错误，请传递正确的邮箱或手机','400');
                break;
            case 3;
                return 'email';
                break;
            case 4;
                return 'phone';
                break;
        }
    }
    //生成验证码
    public function make_code($num){
        // 10000    99999
        $min = pow(10,$num - 1);
        $max = pow(10,$num) - 1;
        $code = rand($min,$max);
        return $code;
    }
    public function check_phone_email($field,$value){
        $admin = new User();
        $res = $admin->where($field,$value)->find();
        if ($res){
            $this->return_msg([],'手机号或者邮箱号已存在');
        }

    }
    public function check_code($name,$code){

        //对比验证码
        if (cache($name.'code') !== md5($code)){
            $this->return_msg([],'验证码错误',400);
        }
        //验证码过期周期
        if (time() - cache($name.'last_time') >= 600 ){
            $this->return_msg([],'验证码过期',200);
        }
        //清空
        cache($name.'code',null);
    }

}